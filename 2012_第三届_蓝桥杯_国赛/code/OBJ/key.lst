C51 COMPILER V9.59.0.0   KEY                                                               05/17/2019 08:03:40 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN ..\OBJ\key.obj
COMPILER INVOKED BY: F:\Keil_v5\C51\BIN\C51.EXE ..\HARDWARE\key.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\INC) DEBUG OB
                    -JECTEXTEND PRINT(..\OBJ\key.lst) TABS(2) OBJECT(..\OBJ\key.obj)

line level    source

   1          #include "sys.h"
   2          
   3          sbit KeyOut1 = P4^4;
   4          sbit KeyOut2 = P4^2;
   5          sbit KeyOut3 = P3^5;
   6          sbit KeyOut4 = P3^4;
   7          sbit KeyIn1 = P3^0;
   8          sbit KeyIn2 = P3^1;
   9          sbit KeyIn3 = P3^2;
  10          sbit KeyIn4 = P3^3;
  11          
  12          unsigned char code KeyMap[4][4] = {{0, 1, 2, 3}, 
  13                                             {4, 5, 6, 7}, 
  14                                             {8, 9, 11, 22}, 
  15                                             {88, 88, 33, 44}};
  16          unsigned char KeyBuff[4][4] = {{0xff, 0xff, 0xff, 0xff},
  17                                         {0xff, 0xff, 0xff, 0xff}, 
  18                                         {0xff, 0xff, 0xff, 0xff}, 
  19                                         {0xff, 0xff, 0xff, 0xff}};
  20          unsigned char KeySta[4][4] = {{1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}};
  21          unsigned char KeyBackup[4][4] = {{1,1,1,1}, {1,1,1,1}, {1,1,1,1}, {1,1,1,1}};
  22            
  23          void KeyScan(void)
  24          {
  25   1        static u8 index = 0;
  26   1        u8 i;
  27   1        
  28   1        //获取当前键值
  29   1        KeyBuff[0][index] = (KeyBuff[0][index] << 1) | KeyIn1;
  30   1        KeyBuff[1][index] = (KeyBuff[1][index] << 1) | KeyIn2;
  31   1        KeyBuff[2][index] = (KeyBuff[2][index] << 1) | KeyIn3;
  32   1        KeyBuff[3][index] = (KeyBuff[3][index] << 1) | KeyIn4;
  33   1      
  34   1        for(i = 0; i < 4; i ++)
  35   1        {
  36   2          if((KeyBuff[i][index] & 0x0f) == 0x00)
  37   2            KeySta[i][index] = 0;
  38   2          else if((KeyBuff[i][index] & 0x0f) == 0x0f)
  39   2            KeySta[i][index] = 1;
  40   2        }
  41   1        
  42   1        index ++;
  43   1        index &= 0x03;
  44   1        switch(index)
  45   1        {
  46   2          case 0: KeyOut1 = 0; KeyOut4 = 1; break;
  47   2          case 1: KeyOut2 = 0; KeyOut1 = 1; break;
  48   2          case 2: KeyOut3 = 0; KeyOut2 = 1; break;
  49   2          case 3: KeyOut4 = 0; KeyOut3 = 1; break;
  50   2        }
  51   1      }
  52          
  53          void KeyPress(void)
  54          {
C51 COMPILER V9.59.0.0   KEY                                                               05/17/2019 08:03:40 PAGE 2   

  55   1        u8 i, j;
  56   1        
  57   1        for(i = 0; i < 4; i ++)
  58   1        {
  59   2          for(j = 0; j < 4; j ++)
  60   2          {
  61   3            if(KeyBackup[i][j] != KeySta[i][j])
  62   3            {
  63   4              if(KeySta[i][j] == 0)        //按键按下时操作
  64   4                KeyAction(KeyMap[i][j]);
  65   4              KeyBackup[i][j] = KeySta[i][j];
  66   4            }
  67   3          }
  68   2        }
  69   1      }
  70          
  71          void KeyAction(u8 keycode)
  72          {
  73   1        static u8 index_kw = 0;
  74   1        
  75   1        //数字键
  76   1        if(mode == 2 && !flag_beep)
  77   1        {
  78   2          if(keycode >= 0 && keycode <= 9)
  79   2          {
  80   3            if(index_kw < 6)
  81   3            {
  82   4              Keyword_in[index_kw] = keycode;
  83   4              index_kw ++;
  84   4            }
  85   3          } 
  86   2        }
  87   1        
  88   1        //设置界面
  89   1        else if(mode == 3)
  90   1        {
  91   2          if(keycode >= 0 && keycode <= 9)
  92   2          {
  93   3            if(index_kw < 6)
  94   3            {
  95   4              Keyword_set[index_kw] = keycode;
  96   4              index_kw ++;
  97   4            }
  98   3          } 
  99   2        }
 100   1        
 101   1        //输入新密码
 102   1        else if(mode == 4)
 103   1        {
 104   2          if(keycode >= 0 && keycode <= 9)
 105   2          {
 106   3            if(index_kw < 6)
 107   3            {
 108   4              Keyword_set[index_kw] = keycode;
 109   4              index_kw ++;
 110   4            }
 111   3          } 
 112   2        }
 113   1        
 114   1        //确认
 115   1        if(keycode == 33)
 116   1        {
C51 COMPILER V9.59.0.0   KEY                                                               05/17/2019 08:03:40 PAGE 3   

 117   2          //开门
 118   2          if(mode == 2)
 119   2          {
 120   3            result = Keyword_check(&Keyword_in);
 121   3            if(result == 1)
 122   3            {
 123   4              flag_relay = 1;
 124   4              error_times = 0;
 125   4            }
 126   3            else if(result == 0)
 127   3            {
 128   4              error_times ++;
 129   4              if(error_times >= 3)
 130   4                flag_beep = 1;
 131   4            }
 132   3            index_kw = 0;
 133   3            Keyword_in[0] = Keyword_in[1] = 16;
 134   3            Keyword_in[2] = Keyword_in[3] = 16;
 135   3            Keyword_in[4] = Keyword_in[5] = 16;
 136   3          }
 137   2          
 138   2          //设置
 139   2          else if(mode == 3)
 140   2          {
 141   3            result = Keyword_check(&Keyword_set);
 142   3            if(result == 1)
 143   3              mode = 4;
 144   3            
 145   3            index_kw = 0;
 146   3            Keyword_set[0] = Keyword_set[1] = 16;
 147   3            Keyword_set[2] = Keyword_set[3] = 16;
 148   3            Keyword_set[4] = Keyword_set[5] = 16;
 149   3          }
 150   2          
 151   2          else if (mode == 4)
 152   2          {
 153   3            index_kw = 0;
 154   3            Keyword[0] = Keyword_set[0];
 155   3            Keyword[1] = Keyword_set[1];
 156   3            Keyword[2] = Keyword_set[2];
 157   3            Keyword[3] = Keyword_set[3];
 158   3            Keyword[4] = Keyword_set[4];
 159   3            Keyword[5] = Keyword_set[5];
 160   3            Keyword_set[0] = Keyword_set[1] = 16;
 161   3            Keyword_set[2] = Keyword_set[3] = 16;
 162   3            Keyword_set[4] = Keyword_set[5] = 16;
 163   3            mode = 1;
 164   3            flag_write = 1;
 165   3          }
 166   2        }
 167   1        
 168   1        //设置键
 169   1        if(keycode == 11)
 170   1        {
 171   2          mode = 3;
 172   2        }
 173   1        
 174   1        //复位
 175   1        if(keycode == 22 && mode < 3)
 176   1        {
 177   2          Keyword[0] = 6;
 178   2          Keyword[1] = 5;
C51 COMPILER V9.59.0.0   KEY                                                               05/17/2019 08:03:40 PAGE 4   

 179   2          Keyword[2] = 4;
 180   2          Keyword[3] = 3;
 181   2          Keyword[4] = 2;
 182   2          Keyword[5] = 1;
 183   2        }
 184   1        
 185   1        //退出
 186   1        if(keycode == 44)
 187   1        {
 188   2          if(mode >= 3 && index_kw < 6)
 189   2          {
 190   3            mode = 1;
 191   3            index_kw = 0;
 192   3            Keyword_set[0] = Keyword_set[1] = 16;
 193   3            Keyword_set[2] = Keyword_set[3] = 16;
 194   3            Keyword_set[4] = Keyword_set[5] = 16;
 195   3          }
 196   2        }
 197   1      }
 198          
 199          u8 Keyword_check(u8 *dat)
 200          {
 201   1        u8 i, temp = 0;
 202   1        
 203   1        for(i = 0; i < 6; i ++)
 204   1        {
 205   2          if(dat[i] != Keyword[i])
 206   2          {
 207   3            temp = 0;
 208   3            break;
 209   3          }
 210   2          else
 211   2            temp = 1;
 212   2        }
 213   1        
 214   1        return temp;
 215   1      }
 216          
 217          
 218          
 219          
 220          
 221          
 222          
 223          
 224          
 225          
 226          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1189    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =     50       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
