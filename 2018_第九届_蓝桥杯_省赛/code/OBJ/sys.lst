C51 COMPILER V9.59.0.0   SYS                                                               07/26/2020 16:29:51 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE SYS
OBJECT MODULE PLACED IN ..\OBJ\sys.obj
COMPILER INVOKED BY: F:\Keil_v5\C51\BIN\C51.EXE ..\SYSTEM\sys.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\INC) DEBUG OBJE
                    -CTEXTEND PRINT(..\OBJ\sys.lst) TABS(2) OBJECT(..\OBJ\sys.obj)

line level    source

   1          #include "sys.h"
   2          
   3          void All_init(void)
   4          {
   5   1        P2 = (P2 & 0x1f) | 0x80;  //打开Y4C
   6   1        P0 = 0xff;    //关闭LED
   7   1        P2 = (P2 & 0x1f) | 0xc0;  //打开Y6C
   8   1        P0 = 0x00;    //关闭所有数码管
   9   1        P2 = (P2 & 0x1f) | 0xa0;  //打开Y5C
  10   1        P0 = 0x00;    //关闭蜂鸣器和继电器
  11   1        P2 = P2 & 0x1f;           //关闭所有573 
  12   1      }
  13          
  14          void Timer0Init(void)   //2毫秒@11.0592MHz
  15          {
  16   1        AUXR |= 0x80;   //定时器时钟1T模式
  17   1        TMOD &= 0xF0;   //设置定时器模式
  18   1        TL0 = 0x9a;   //设置定时初值
  19   1        TH0 = 0xa9;   //设置定时初值
  20   1        TF0 = 0;    //清除TF0标志
  21   1        TR0 = 1;    //定时器0开始计时
  22   1        ET0 = 1;
  23   1      }
  24          
  25          void Timer0(void) interrupt 1
  26          {
  27   1        static u16 T0count1 = 0, T0count2 = 0;
  28   1        static u8 index = 0, e2_addr = 0x00;
  29   1        
  30   1        T0count2 ++;
  31   1        
  32   1        if(Mode_Option > 0)     //800ms数码管闪烁
  33   1        {
  34   2          T0count1 ++;
  35   2          if(T0count1 >= 400)
  36   2          {
  37   3            T0count1 = 0;
  38   3            flag_800ms = ~flag_800ms;
  39   3          }
  40   2        }
  41   1        
  42   1        if((T0count2 % 5 == 0) && (T0count2 < 30))  //每10ms时写一次E2PROM
  43   1        {
  44   2          switch(index)
  45   2          {
  46   3            case 0: Write_E2PROM(0x00, time_led[e2_addr]); break;
  47   3            case 1: Write_E2PROM(0x01, time_led[e2_addr]); break;
  48   3            case 2: Write_E2PROM(0x02, time_led[e2_addr]); break;
  49   3            case 3: Write_E2PROM(0x03, time_led[e2_addr]); break;
  50   3            case 4: Write_E2PROM(0x04, time_led[e2_addr]); break;
  51   3            default : break;
  52   3          }
  53   2          index ++;
  54   2          e2_addr ++;
C51 COMPILER V9.59.0.0   SYS                                                               07/26/2020 16:29:51 PAGE 2   

  55   2          
  56   2          if(index >= 5)
  57   2          {
  58   3            index = 0;
  59   3            e2_addr  = 0;
  60   3          }
  61   2        }
  62   1        else if(T0count2 >= 30)   //60ms时读取一次AD值
  63   1        {
  64   2          T0count2 = 0;
  65   2          pwm = Read_AIN(0x03);
  66   2        }
  67   1      
  68   1        Key_Scan();
  69   1        Smg_show();
  70   1        Smg_Scan();
  71   1      }
  72          
  73          void Timer1Init(void)   //100us@11.0592MHz
  74          {
  75   1        AUXR |= 0x40;   //定时器时钟1T模式
  76   1        TMOD &= 0x0F;   //设置定时器模式
  77   1        TL1 = 0xAE;   //设置定时初值
  78   1        TH1 = 0xFB;   //设置定时初值
  79   1        TF1 = 0;    //清除TF1标志
  80   1        TR1 = 0;    //定时器1暂停计时
  81   1        ET1 = 1;
  82   1      }
  83          
  84          void Timer1(void) interrupt 3
  85          {
  86   1        static u8 dat;
  87   1        static u16 T1count1 = 0;
  88   1        static u8 mode_backup = 0;
  89   1        static u8 index = 0, T1count2 = 0;
  90   1        static u8 mode_index = 1;
  91   1        u16 temp = 0;
  92   1        u8 hightime = 0;
  93   1        
  94   1        T1count1 ++;
  95   1        T1count2 ++;
  96   1        
  97   1        T1count2 &= 0x0f;     //最大计数到15
  98   1        
  99   1        temp = 1000 * time_led[mode_index];   //流转时间间隔
 100   1        hightime = pwm * pwm;               //高电平时间
 101   1        
 102   1        if(T1count1 >= temp)
 103   1        {
 104   2          T1count1 = 0;
 105   2          
 106   2          if(mode_index == 1)
 107   2          {
 108   3            if(mode_backup != mode_index)
 109   3            {
 110   4              dat = 0x7f;
 111   4              mode_backup = mode_index;
 112   4            }
 113   3            dat = _crol_(dat, 1);     //模式1
 114   3            if(dat == 0x7f)
 115   3              mode_index ++;
 116   3          }
C51 COMPILER V9.59.0.0   SYS                                                               07/26/2020 16:29:51 PAGE 3   

 117   2          
 118   2          else if(mode_index == 2)
 119   2          {
 120   3            if(mode_backup != mode_index)
 121   3            {
 122   4              dat = 0xfe;
 123   4              mode_backup = mode_index;
 124   4            }
 125   3            dat = _cror_(dat, 1);     //模式2
 126   3            if(dat == 0xfe)
 127   3              mode_index ++;
 128   3          }
 129   2          
 130   2          else if(mode_index == 3)
 131   2          {
 132   3            if(mode_backup != mode_index)
 133   3            {
 134   4              index = 0;
 135   4              mode_backup = mode_index;
 136   4            }
 137   3            switch(index)
 138   3            {
 139   4              case 0: dat = 0x7e; break;    //0111 1110
 140   4              case 1: dat = 0xbd; break;    //1011 1101
 141   4              case 2: dat = 0xdb; break;
 142   4              case 3: dat = 0xe7; break;
 143   4              default : break;
 144   4            }
 145   3            index ++;
 146   3            index &= 0x03;
 147   3            if(dat == 0xe7)
 148   3              mode_index ++;
 149   3          }
 150   2          
 151   2          else if(mode_index == 4)
 152   2          {
 153   3            if(mode_backup != mode_index)
 154   3            {
 155   4              index = 0;
 156   4              mode_backup = mode_index;
 157   4            }
 158   3            switch(index)
 159   3            {
 160   4              case 0: dat = 0xe7; break;    //1110 0111
 161   4              case 1: dat = 0xdb; break;    //1011 1101
 162   4              case 2: dat = 0xbd; break;
 163   4              case 3: dat = 0x7e; break;
 164   4              default : break;
 165   4            }
 166   3            index ++;
 167   3            index &= 0x03;
 168   3            if(dat == 0x7e)
 169   3              mode_index = 1;
 170   3          }
 171   2        }
 172   1        
 173   1        if(T1count2 < hightime)     //PWM
 174   1          LED_work(dat);
 175   1        else
 176   1          LED_work(0xff);
 177   1      }

C51 COMPILER V9.59.0.0   SYS                                                               07/26/2020 16:29:51 PAGE 4   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    870    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     13    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
