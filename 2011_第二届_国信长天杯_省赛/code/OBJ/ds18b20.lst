C51 COMPILER V9.59.0.0   DS18B20                                                           03/12/2019 12:16:10 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE DS18B20
OBJECT MODULE PLACED IN ..\OBJ\ds18b20.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\HARDWARE\ds18b20.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\INC) DEBUG OBJE
                    -CTEXTEND PRINT(..\OBJ\ds18b20.lst) TABS(2) OBJECT(..\OBJ\ds18b20.obj)

line level    source

   1           #include "sys.h"
   2          
   3          sbit DS18B20_IO = P1^4;
   4          
   5          void Delayus(unsigned int us)
   6          {
   7   1        do{
   8   2          _nop_();
   9   2          _nop_();
  10   2          _nop_();
  11   2          _nop_();
  12   2          _nop_();
  13   2          _nop_();
  14   2          _nop_();
  15   2          _nop_();
  16   2        }while(--us);
  17   1      }
  18          
  19          bit Get18B20Ack(void)
  20          {
  21   1        bit ack;
  22   1        
  23   1        DS18B20_IO = 0;     //产生500us的复位脉冲
  24   1        Delayus(500);
  25   1      //  EA = 0;             //禁止总中断
  26   1        ET0 = 0;
  27   1        DS18B20_IO = 1;     //延时60us
  28   1        Delayus(60);
  29   1      //  EA = 1;             //重新使能总中断
  30   1        ET0 = 1;
  31   1        ack = DS18B20_IO;   //读取存在脉冲
  32   1        while(!DS18B20_IO); //等待存在脉冲结束
  33   1        
  34   1        return ack;   
  35   1      }
  36          
  37          void DS18B20Write(unsigned char dat)
  38          {
  39   1        unsigned char mask;
  40   1                  
  41   1        for(mask = 0x01; mask != 0; mask <<= 1) //低位在先，依次移出8个bit
  42   1        {
  43   2      //    EA = 0;
  44   2          ET0 = 0;
  45   2          DS18B20_IO = 0;       //产生2us低电平脉冲
  46   2          Delayus(2);
  47   2          if(dat & mask)        //输出该bit值
  48   2            DS18B20_IO = 1;
  49   2          else
  50   2            DS18B20_IO = 0;
  51   2      //    EA = 1;
  52   2          ET0 = 1;
  53   2          Delayus(60);          //延时60us
  54   2          DS18B20_IO = 1;       //拉高通信引脚
C51 COMPILER V9.59.0.0   DS18B20                                                           03/12/2019 12:16:10 PAGE 2   

  55   2        }
  56   1      }
  57          
  58          unsigned char DS18B20Read(void)
  59          {
  60   1        unsigned char mask, dat = 0;
  61   1        
  62   1        for(mask = 0x01; mask != 0; mask <<= 1) //低位在先，依次采集8个bit
  63   1        {
  64   2      //    EA = 0;
  65   2          ET0 = 0;
  66   2          DS18B20_IO = 0;       //产生2us低电平脉冲
  67   2          Delayus(2);
  68   2          DS18B20_IO = 1;       //结束低电平脉冲，等待18B20输出数据
  69   2          Delayus(2);           //延时2us
  70   2          if(DS18B20_IO)        //读取通信引脚上的值
  71   2            dat |= mask;
  72   2      //    EA = 1;
  73   2          ET0 = 1;
  74   2          Delayus(60);          //再延时60us
  75   2        }
  76   1        
  77   1        return dat; 
  78   1      }
  79          
  80          bit Start18B20()
  81          {
  82   1        bit ack;
  83   1        static bit flag = 1;
  84   1      
  85   1        ack = Get18B20Ack();    //执行总线复位，并获取18B20应答
  86   1        if(ack == 0)            //如18B20正确应答，则启动一次转换
  87   1        {
  88   2          DS18B20Write(0xCC);   //跳过ROM操作
  89   2          
  90   2          if(flag)
  91   2          {
  92   3            flag = 0;
  93   3            DS18B20Write(0x4e);     //写暂存器指令4E
  94   3            DS18B20Write(0x63);     //写高速缓存器TH高温限值99度
  95   3            DS18B20Write(0x00);     //写高速缓存器TL低温限值0度
  96   3            DS18B20Write(0x1f);     //写配置寄存器4
  97   3                                    //0x1f ： 0.5000°C  转换时间93.75ms
  98   3                                    //0x3f ： 0.2000°C  转换时间187.5ms
  99   3                                    //0x5f ： 0.1250°C  转换时间375ms
 100   3                                    //0x7f ： 0.0625°C  转换时间750ms
 101   3          }
 102   2          
 103   2          ack = Get18B20Ack();    //执行总线复位，并获取18B20应答
 104   2          if(ack == 0)            //如18B20正确应答，则启动一次转换
 105   2          {
 106   3            DS18B20Write(0xCC);   //跳过ROM操作
 107   3            DS18B20Write(0x44);   //启动一次温度转换
 108   3          }
 109   2        }
 110   1      
 111   1        return ~ack;            //ack == 0 表示操作成功，所以返回值对其取反
 112   1      }
 113          
 114          bit Get18B20Temp(int *temp)
 115          {
 116   1        bit ack;
C51 COMPILER V9.59.0.0   DS18B20                                                           03/12/2019 12:16:10 PAGE 3   

 117   1        unsigned char LSB, MSB;     //16bit温度值的低字节和高字节
 118   1      
 119   1        ack = Get18B20Ack();        //执行总线复位，并获取18B20应答
 120   1        if(ack == 0)                //如18B20正确应答，则读取温度值
 121   1        {
 122   2          DS18B20Write(0xCC);       //跳过ROM操作
 123   2          DS18B20Write(0xBE);       //发送读命令
 124   2          LSB = DS18B20Read();      //读温度值的低字节
 125   2          MSB = DS18B20Read();      //读温度值的高字节
 126   2          *temp = ( MSB << 8) + LSB;  //合成16bit的整数
 127   2        }
 128   1      
 129   1        return ~ack;                //ack == 0 表示操作应答，所以返回值为1其取反值
 130   1      } 
 131          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    240    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       3
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
